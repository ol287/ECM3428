{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No spanning tree\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import csv\n",
    "import sys\n",
    "\n",
    "class Edge:\n",
    "    def __init__(self, v1, v2, weight):\n",
    "        self.v1 = v1\n",
    "        self.v2 = v2\n",
    "        self.weight = weight\n",
    "\n",
    "def get_graph(filename):\n",
    "    \"\"\"\n",
    "    Get the graph information from the file.\n",
    "    \"\"\"\n",
    "    edges = []\n",
    "    vertex = {}\n",
    "\n",
    "    with open(filename) as csvfile:\n",
    "        edgereader = csv.reader(csvfile)\n",
    "        for r in edgereader:\n",
    "            edge = Edge(r[0], r[1], int(r[2]))\n",
    "            edges.append(edge)\n",
    "            vertex[r[0]] = 1\n",
    "            vertex[r[1]] = 1\n",
    "\n",
    "    return list(vertex.keys()), edges\n",
    "\n",
    "def group(v, groups):\n",
    "    \"\"\"\n",
    "    Get the index of the group that a vertex v is in.\n",
    "    \"\"\"\n",
    "\n",
    "    for i in range(len(groups)):\n",
    "        if v in groups[i]:\n",
    "            return i\n",
    "    raise Exception(\"Vertex not in group\")\n",
    "\n",
    "\n",
    "def merge_groups(v1, v2, groups):\n",
    "    \"\"\"\n",
    "    Merge the two groups that contain v1 and v2.\n",
    "    \"\"\"\n",
    "\n",
    "    for g in range(len(groups)):\n",
    "        if v1 in groups[g]:\n",
    "            g1 = g\n",
    "        if v2 in groups[g]:\n",
    "            g2 = g\n",
    "    \n",
    "    #Merge the two groups, occuping the location of the first one.\n",
    "    groups[g1] = groups[g1] + groups[g2]\n",
    "    #Delete the second one from groups.\n",
    "    groups.pop(g2)\n",
    "    return groups\n",
    "\n",
    "\n",
    "def kruskal(vertex,edges):\n",
    "    \"\"\"\n",
    "    Find the minimum spanning tree using Kruskal's algorithm\n",
    "    vertex: vertices of the graph\n",
    "    edges: all edges, each defined by two vertices and the weight\n",
    "    ------------------\n",
    "    return values\n",
    "    vt: vertices of the minimum spanning tree\n",
    "    et: edges of the minimum spanning tree\n",
    "    \"\"\"\n",
    "    vt = set()\n",
    "    et = []\n",
    "    edges.sort(key=lambda x: x.weight)\n",
    "    remaining = list(edges)\n",
    "    groups = [v for v in vertex]\n",
    "    \n",
    "    # You can start coding here\n",
    "   \n",
    "\n",
    "    # If no possible spanning tree can be created.\n",
    "    if not len(et) == len(vertex) - 1:\n",
    "        print (\"No spanning tree\")\n",
    "        return set(),[]\n",
    "    else:\n",
    "        return vt, et\n",
    "\n",
    "\n",
    "def saveMST(mst):\n",
    "    \"\"\"\n",
    "    Save the minimum spanning tree to a csv file. \n",
    "    mst: the minimum spanning tree, in the form of v1, v2, weight\n",
    "    \"\"\"\n",
    "    with open('MinimumSpanningTree.csv', 'w') as csvfile:\n",
    "        mintree = csv.writer(csvfile, delimiter=',')\n",
    "    \n",
    "        for i in mst:\n",
    "            mintree.writerow([i.v1, i.v2, i.weight])\n",
    "            print (i.v1, i.v2, i.weight)\n",
    "\n",
    "\n",
    "def plotMST(graph,mst):\n",
    "    \"\"\"\n",
    "    Plot the whole graph and the minimum spanning tree.\n",
    "    graph: the overall graph\n",
    "    mst: minimum spanning tree\n",
    "    \"\"\"\n",
    "    # Plot the graph\n",
    "    try:\n",
    "        import matplotlib.pyplot as plt\n",
    "        import networkx as nx\n",
    "    except:\n",
    "        print (\"Required libraries are not installed to plot graphs.\")\n",
    "        sys.exit()\n",
    "\n",
    "    plt.clf()\n",
    "    G = nx.Graph()\n",
    "\n",
    "    edges_all = []\n",
    "    for e in graph:\n",
    "        G.add_node(e.v1)\n",
    "        G.add_node(e.v2)\n",
    "        G.add_edge(e.v1, e.v2, weight=e.weight)\n",
    "        edges_all.append((e.v1, e.v2))\n",
    "\n",
    "    edges_route = []\n",
    "    for e in mst:\n",
    "        edges_route.append((e.v1, e.v2))\n",
    "\n",
    "    pos = nx.spring_layout(G, k=2)\n",
    "    edge_labels = dict([((u,v,), d['weight']) for u,v,d in G.edges(data=True)])\n",
    "    nx.draw_networkx_nodes(G, pos, node_size=300)\n",
    "    nx.draw_networkx_edges(G, pos, edgelist=edges_all, width=2, alpha=0.5, style='dashed')\n",
    "    nx.draw_networkx_edges(G, pos, edgelist=edges_route, width=3, edge_color='b')\n",
    "    nx.draw_networkx_labels(G, pos, font_size=10, font_family='sans-serif')\n",
    "    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)\n",
    "\n",
    "    plt.axis('off')\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    \n",
    "    try:\n",
    "        #filename = sys.argv[1]\n",
    "        filename = 'mst-example-1.csv'\n",
    "    except:\n",
    "        print (\"No input file specified. Usage: python Kruskal.py mst-example-1.csv\")\n",
    "        sys.exit()\n",
    "\n",
    "    #Read the graph from an external file\n",
    "    vertex, edges = get_graph(filename)\n",
    "\n",
    "    #Call Kruskal algorithm\n",
    "    vt,mst=kruskal(vertex,edges)\n",
    "\n",
    "    # If you would like to use the provided saving and ploting functions, uncomment the following lines.\n",
    "    # saveMST(mst)\n",
    "    plotMST(edges,mst)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "D G 10\n",
      "C D 14\n",
      "C E 15\n",
      "F H 16\n",
      "A C 18\n",
      "B D 19\n",
      "G H 21\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import csv\n",
    "import sys\n",
    "\n",
    "class Edge:\n",
    "    def __init__(self, v1, v2, weight):\n",
    "        self.v1 = v1  # First vertex of the edge\n",
    "        self.v2 = v2  # Second vertex of the edge\n",
    "        self.weight = weight  # Weight of the edge\n",
    "\n",
    "def get_graph(filename):\n",
    "    \"\"\"\n",
    "    Get the graph information from the file.\n",
    "    The graph is represented as a list of edges and a list of vertices.\n",
    "    \"\"\"\n",
    "    edges = []\n",
    "    vertex = {}\n",
    "\n",
    "    with open(filename) as csvfile:\n",
    "        edgereader = csv.reader(csvfile)\n",
    "        for r in edgereader:\n",
    "            edge = Edge(r[0], r[1], int(r[2]))  # Create an edge object from each line\n",
    "            edges.append(edge)\n",
    "            vertex[r[0]] = 1  # Add vertices to the vertex set\n",
    "            vertex[r[1]] = 1\n",
    "\n",
    "    return list(vertex.keys()), edges  # Return vertices and edges\n",
    "\n",
    "def group(v, groups):\n",
    "    \"\"\"\n",
    "    Get the index of the group that a vertex v is in.\n",
    "    Groups represent connected components, and each vertex belongs to one group.\n",
    "    \"\"\"\n",
    "    for i in range(len(groups)):\n",
    "        if v in groups[i]:\n",
    "            return i\n",
    "    raise Exception(\"Vertex not in group\")\n",
    "\n",
    "def merge_groups(v1, v2, groups):\n",
    "    \"\"\"\n",
    "    Merge the two groups that contain v1 and v2.\n",
    "    This is part of the union-find structure, ensuring we avoid cycles.\n",
    "    \"\"\"\n",
    "    for g in range(len(groups)):\n",
    "        if v1 in groups[g]: g1 = g\n",
    "        if v2 in groups[g]: g2 = g\n",
    "\n",
    "    # Merge the two groups, keeping them in the same set\n",
    "    groups[g1] = groups[g1] + groups[g2]\n",
    "    # Delete the second group, as its vertices are now merged\n",
    "    groups.pop(g2)\n",
    "    return groups\n",
    "\n",
    "def kruskal(vertex, edges):\n",
    "    \"\"\"\n",
    "    Find the minimum spanning tree using Kruskal’s algorithm.\n",
    "    :param vertex: vertices of the graph\n",
    "    :param edges: all edges, each defined by two vertices and the weight\n",
    "    :return: vt - vertices of the minimum spanning tree, et - edges of the minimum spanning tree\n",
    "    \"\"\"\n",
    "    vt = set()  # Vertices of the MST\n",
    "    et = []  # Edges of the MST\n",
    "    edges.sort(key=lambda x: x.weight)  # Sort edges by weight in ascending order\n",
    "    remaining = list(edges)\n",
    "    groups = [[v] for v in vertex]  # Initialize each vertex in its own group\n",
    "\n",
    "    # Kruskal's algorithm main loop\n",
    "    while len(et) < len(vertex) - 1 and remaining:\n",
    "        edge = remaining.pop(0)  # Get the edge with the smallest weight\n",
    "        group_v1 = group(edge.v1, groups)\n",
    "        group_v2 = group(edge.v2, groups)\n",
    "\n",
    "        # Only add the edge if it connects two different groups (no cycle is formed)\n",
    "        if group_v1 != group_v2:\n",
    "            et.append(edge)  # Add edge to MST\n",
    "            vt.update([edge.v1, edge.v2])  # Add vertices to MST\n",
    "            groups = merge_groups(edge.v1, edge.v2, groups)  # Merge the groups\n",
    "\n",
    "    # If we haven't added exactly V-1 edges, there is no spanning tree\n",
    "    if len(et) != len(vertex) - 1:\n",
    "        print(\"No spanning tree\")\n",
    "        return set(), []\n",
    "    else:\n",
    "        return vt, et  # Return the vertices and edges in the MST\n",
    "\n",
    "def saveMST(mst):\n",
    "    \"\"\"\n",
    "    Save the minimum spanning tree to a csv file.\n",
    "    \"\"\"\n",
    "    with open('MinimumSpanningTree.csv', 'w') as csvfile:\n",
    "        mintree = csv.writer(csvfile, delimiter=',')\n",
    "        for i in mst:\n",
    "            mintree.writerow([i.v1, i.v2, i.weight])\n",
    "            print(i.v1, i.v2, i.weight)  # Optional: print edges to console\n",
    "\n",
    "def plotMST(graph, mst):\n",
    "    \"\"\"\n",
    "    Plot the whole graph and the minimum spanning tree using networkx and matplotlib.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        import matplotlib.pyplot as plt\n",
    "        import networkx as nx\n",
    "    except:\n",
    "        print(\"Required libraries are not installed to plot graphs.\")\n",
    "        sys.exit()\n",
    "\n",
    "    G = nx.Graph()\n",
    "\n",
    "    edges_all = []\n",
    "    for e in graph:\n",
    "        G.add_node(e.v1)\n",
    "        G.add_node(e.v2)\n",
    "        G.add_edge(e.v1, e.v2, weight=e.weight)\n",
    "        edges_all.append((e.v1, e.v2))\n",
    "\n",
    "    edges_route = []\n",
    "    for e in mst:\n",
    "        edges_route.append((e.v1, e.v2))\n",
    "\n",
    "    pos = nx.spring_layout(G, k=2)\n",
    "    edge_labels = dict([((u, v,), d['weight']) for u, v, d in G.edges(data=True)])\n",
    "    nx.draw_networkx_nodes(G, pos, node_size=300)\n",
    "    nx.draw_networkx_edges(G, pos, edgelist=edges_all, width=2, alpha=0.5, style='dashed')\n",
    "    nx.draw_networkx_edges(G, pos, edgelist=edges_route, width=3, edge_color='b')\n",
    "    nx.draw_networkx_labels(G, pos, font_size=10, font_family='sans-serif')\n",
    "    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)\n",
    "\n",
    "    plt.axis('off')\n",
    "    plt.show()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    try:\n",
    "        filename = \"mst-example-1.csv\"\n",
    "    except:\n",
    "        print(\"No input file specified. Usage: python Kruskal.py mst-example-1.csv\")\n",
    "        sys.exit()\n",
    "\n",
    "    # Read the graph from an external file\n",
    "    vertex, edges = get_graph(filename)\n",
    "\n",
    "    # Call Kruskal algorithm\n",
    "    vt, mst = kruskal(vertex, edges)\n",
    "\n",
    "    # Save and plot the minimum spanning tree\n",
    "    saveMST(mst)\n",
    "    plotMST(edges, mst)\n"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
